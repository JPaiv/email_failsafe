name: "Terraform AWS infra deployment"

on:
  push:
    branches:
      - main

jobs:
  terraform:
    env:
      TF_VAR_region: eu-central-1
      TF_VAR_stage: test

    name: "Terraform"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        continue-on-error: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        continue-on-error: false

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./tf_infrastrucsture
        continue-on-error: false

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        working-directory: ./tf_infrastrucsture
        continue-on-error: false

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        working-directory: ./tf_infrastrucsture
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve
        working-directory: ./tf_infrastrucsture
        continue-on-error: false

  serverless:
    name: "Serverless"
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     node-version: [14.8.1]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - run: npm install
      - run: npm test
      - name: Install Serverless Framework
        run: npm install -g serverless
      - name: Serverless AWS authentication
        run: sls config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # - name: Create env file
      #   run: | # cp sample.env.yml env.yml
      #     cat > env.yml << EOF
      #     ${{ secrets.ENV }}
      #     EOF
      - name: Install NPM dependencies
        run: npm install
      # Optional
      #- name: Build assets
      #  run: npm run assets-dev
      - name: Deploy Lambda functions
        working-directory: ./serverless
        run: sls deploy
    # Optional (to use with serverless-finch serverless plugin)
    #- name: Deploy assets to S3
    #  run: sls client deploy --no-delete-contents --no-confirm -s dev
